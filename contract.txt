pragma solidity ^0.4.2;

contract MyContract {
    /* Constructor */
     event print(string out);
     address private owner;
     address[3] private secretKeeper;
     uint[3] private subKey;
     string[3] private hashKeyArray;
     uint public usedNumber;
     uint public publishedNumber;
     uint public threshold;
     uint public totalKeeper;
     uint private K;
     uint private a;
     string private decryptedMessage;
     string private encryptedMessage;
     uint public openingTime;

    
    function MyContract() {
        secretKeeper = [0, 0, 0];
        subKey = [0, 0, 0];
        hashKeyArray = [hashFunction(0), hashFunction(1), hashFunction(2)]; //Hash 3 random Value
        usedNumber = 0;
        publishedNumber = 0;
        threshold = 2;
        totalKeeper = 3; 
        openingTime = now + 5 minutes;
        owner = 0;
    }

    function setOwner(uint K, string message) {

        if (owner != 0) {
            print("Already have an Owner!!!!");
            return;
        }

        owner = msg.sender; 
        setUpKey(K, message);
        print("Key Owner Setup Done!!!");
        return;
    }


    //return randomHash
    function getHash() returns (string) {
        if (usedNumber >= totalKeeper) {
            print("NO MORE SPACE!!!");
            return;
        }

         address addr = msg.sender;
        
        if (addr == owner) {
            print("You are the Key Owner!! Cannot be as Key Holder!!! You are calling getHash()!!");
            return;
        }

        print("One Hash number is pushed!! Please solve it and get the secret Key!");
        print(hashKeyArray[usedNumber]);
        return hashKeyArray[usedNumber];
    }



    function setUpKey(uint K, string message) internal {
        encryptedMessage = encryptMessage(K, message); // Encrypte Key by K and Message;
        print("Encrypt Key finish set");
        encryptKey(K);
    }

    // encrypt Message Method(Omit)
    function encryptMessage(uint k, string message) internal returns (string){
        return message;
    }

    //Decrypt Message Method(Omit)
    function decryptMessage(uint k) internal returns (string){
        return encryptedMessage;
    }


    //Encrypt Key Method(Omit)
    //(3, 2) - Shamir Threshold Scheme
    function encryptKey(uint k) internal {
        subKey = [1, 2, 3];
    }

    // Decrupt Key
    //(3, 2) - Shamir Threshold Scheme
    function decryptKey() internal returns (uint){
        return K;
    }


    //hash function(omit)
    //from string to uint
    function hashFunction (uint key) internal returns (string) {
         if (key == 0) {
             return "aaa";
         } else if (key == 1) {
             return "bbb";
         } else if (key == 2) {
             return "ccc";
         }
         return "null";
    } 

    
    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {
        bytes storage a = bytes(_a);
        bytes memory b = bytes(_b);
        if (a.length != b.length)
            return false;
        for (uint i = 0; i < a.length; i ++)
            if (a[i] != b[i])
                return false;
        return true;
    }


    function getSubKey(uint hashKeyInt) {
        if (usedNumber >= totalKeeper) {
            print("NO MORE SPACE!!");
            return;
        }
        
        address addr = msg.sender;
        
        if (addr == owner) {
            print("You are the Key Owner!! Cannot be as Key Holder you are calling getSecretKey()!!");
            return;
        }


        if (secretKeeper[0] == addr || secretKeeper[1] == addr || secretKeeper[2] == addr){
            print("You have inserted Already!!!");
            return;
        }

  

        if (!stringsEqual(hashKeyArray[usedNumber], hashFunction(hashKeyInt))) {
            print("You do not solve the Hash problem!!! Cannot assign you the key");
            return;
        }
        
        usedNumber++;
        
        if (usedNumber == 1) {
            secretKeeper[0] = addr;
            print("One Address set to hold the secret!!");
        }
        
        else if (usedNumber == 2) {
            secretKeeper[1] = addr;
            print("One Address is set to hold the secret!!");
        }
        
        else if (usedNumber == 2) {
            secretKeeper[2] = addr;
            print("One Address is set to hold the secret!!");
        }
    }
    
    function unlockSubKey() {

        if (now < openingTime) {
            print("Does not reach the opening day, please wait!!!");
            return;
        }
        address addr = msg.sender;

        if (addr == owner) {
            print("You are the Key Owner!! Cannot be as Key Holder!!!");
            return;
        }

        if (secretKeeper[0] != addr && secretKeeper[1] != addr && secretKeeper[2] != addr) {
            print("You are not the Key Holder!! Cannot unlock");
            return;
        }

        if (secretKeeper[0] == addr) {
            publishedNumber++;
            secretKeeper[0] = 0;
        }

        if (secretKeeper[1] == addr) {
            publishedNumber++;
            secretKeeper[1] = 0;
        }

        if (secretKeeper[2] == addr) {
            publishedNumber++;
            secretKeeper[2] = 0;
        }

        if (publishedNumber == threshold) {
            uint k = decryptKey();
            decryptedMessage = decryptMessage(k);
            print("FINISHED!!!");
            print("TIME CAPSULE IS ");
            print(decryptedMessage);
            //send ETHER to secret keeper
        } else {
            print("Need ONE MORE secret keeper to unlock!!");
        }
    }
}